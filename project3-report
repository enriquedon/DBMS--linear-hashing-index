
Report for Project 3

members:
Yue DONG   
Shuaiwei CUI 



***********************1. Page Format:***********************
There is no difference between the Pages in primary file and meta file.

	For Integer and Float:
-----------------------------
|key1,RID1,RID1|key2,RID2	|
|---------------------------|
|,RID2|						|
|---------------------------|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|---------------------------|
|	   |#entries|OF Page No.|
-----------------------------

	For Varchar:
-----------------------------
|len1,key1,RID1,RID1|len2,	|
|---------------------------|
|key2,RID2,RID2|len3,key3,	|
|---------------------------|
|RID3,RID3					|
|---------------------------|
|							|
|							|
|							|
|							|
|							|
|							|
|							|
|---------------------------|
|	len1+len2+len3|len1+len2|   Directory where stores offsets for both head and end
|---------------------------|
|len1|0|#entries|OF Page No.|
-----------------------------

***********************2. match-finding scheme***********************

    We keep the index in an accending order according to the 'key'. To insert or search an index, we 
first use hash function to locate the primary page. Then we read this primary page and all the overflow page following into memory. By using binary search, we are able to do the match-finding in O(logn).


***********************3. Handle a split/merge of pages***********************

	Split:
	We will split the bucket When a new entry hashes to a full primary page. In our implementation, we first retrieve all entries from this primary page and the following overflow pages, and then insert them into two vectors of new pages according to their hash value. Since the 'OF page No' have been kepted in 'vector<int> &usedOFnumber', we are able to reuse the discarded space in 'meta file'.

	Merge
	We will split the bucket When a page is empty after deletion. In our implementation, we first retrieve all entries from the two pages and the following overflow pages, and then insert them into the upper bucket. If the vaules of 'next' and 'level' are both 0 before merge, merge will not be executed.

***********************4. Hash Function***********************

- Int type: return unsigned int mod sizeOfPrimaryPage.
- Real type: multiplied by 111 and return unsigned int mod sizeOfPrimaryPage.
- VarChar type: get the fisrt and the last char of the key, convert them into integer and sum them up. return unsigned int mod sizeOfPrimaryPage.